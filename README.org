#+Title: k8s-delphin-parsing

It's a high-performance architecture for 'deep' linguistic processing
of documents with [[http://delph-in.net/][DELPHI-IN]] tools [[https://github.com/delph-in/pydelphin][pyDelphin]] and [[http://sweaglesw.org/linguistics/ace/][ACE]] combined with a
parallel processing using kubernetes and [[https://github.com/rq/rq][RQ]].

* Running the k8s-delphin-parsing on IBM Cloud

** Prerequisites
It is important to ensure that you have IBM Cloud account, if you do
not [[https://console.bluemix.net/registration/?cm_mmc=Display-SampleApp-_-IBMCloudSampleApp-DatabasesForRedis][sign up here]]. You also need to instanciate [[https://cloud.ibm.com/kubernetes/catalog/cluster/create][IBM Cloud Kubernetes
Service]] and [[https://cloud.ibm.com/catalog/services/cloud-object-storage][IBM Cloud Object Storage]]. Create a IBM Cloud Object
Storage service [[https://cloud.ibm.com/docs/containers?topic=containers-object_storage&locale=en-us#service_credentials][credential]]. Ensure that you have installed:

- [[https://kubernetes.io/docs/tasks/tools/install-kubectl/][kubectl]]
- [[https://cloud.ibm.com/docs/cli/reference/ibmcloud?topic=cloud-cli-install-ibmcloud-cli][ibmcloud cli]]
- [[https://helm.sh/docs/using_helm/][helm]]

** Deploying
First step is log in your IBM Cloud account and then set the cluster
you created as the context for this session:

#+begin_src bash :var cluster_name=mycluster
  ibmcloud login -a cloud.ibm.com -r us-south -g Default --sso
  ibmcloud ks cluster-config --cluster $cluster_name
#+end_src

Installing Tiller, the Helm server, in your cluster:

#+begin_src 
kubectl create serviceaccount tiller -n kube-system
kubectl create clusterrolebinding tiller --clusterrole=cluster-admin --serviceaccount=kube-system:tiller -n kube-system
helm init --service-account tiller
#+end_src

Installing the [[https://cloud.ibm.com/docs/containers?topic=containers-object_storage&locale=en-us#install_cos][IBM Cloud Object Storage plug-in]]:
  
#+begin_src 
helm repo add iks-charts https://icr.io/helm/iks-charts
helm repo update
helm fetch --untar iks-charts/ibm-object-storage-plugin
helm plugin install ./ibm-object-storage-plugin/helm-ibmc
chmod 755 ~/.helm/plugins/helm-ibmc/ibmc.sh
helm ibmc install iks-charts/ibm-object-storage-plugin --name ibm-object-storage-plugin
#+end_src

Now fill the =delphin-parsing-chart/values.yaml= file. Values decscription:

- =ace.options= ACE Command-line Options
- =ace.replicas= number of ace instances
- =credentials.apikey= the API key that you can retrieve from your IBM
  Cloud Object Storage service credentials earlier
- =credentials.guid= the GUID of your IBM Cloud Object Storage service
  instance you can get that with =ibmcloud resource service-instance
  <service_name> | grep GUI=
- =cos.inbucket= the name of the existing bucket with the data that you
  want to process
- =cos.outbucket= the name of the existing bucket where the results
  will be save
- =cos.endpoint= see https://cloud.ibm.com/docs/services/cloud-object-storage/basics?topic=cloud-object-storage-endpoints#select-regions-and-endpoints
- =cos.storageClassName= find your service instance in the IBM Cloud
  dashboard and review the Class and Location of your existing
  bucket. Then, use the appropriate [[https://cloud.ibm.com/docs/containers?topic=containers-object_storage&locale=en-us#cos_storageclass_reference][storage class]].

Finally, deploy:
#+BEGIN_SRC bash
helm install ./delphin-parsing-chart/
#+END_SRC

** Monitoring the parse

Get the public IP address for the worker node in the cluster.
#+BEGIN_SRC bash var: cluster_name=mycluster
ibmcloud ks workers --cluster $cluster_name
#+END_SRC
Open a browser and check out the app with the following URL: =http://<IP_address>:30001=.

* Architecture
#+CAPTION: Diagram
#+NAME:   fig:diagram
[[./diagram.png]]

* Authors
- [[http://arademaker.github.io/][Alexandre Rademaker]]
- Henrique Muniz

* Lincese
TODO
